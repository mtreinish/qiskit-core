---
prelude: >
    The 0.13.0 release includes several new features and bug fixes. There are
    many big changes this release.

    For the transpiler we have switched the graph library used to build the
    :class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data
    structure behind all operations to be based on
    `retworkx <https://pypi.org/project/retworkx/>`_ for greatly improved
    performance. Circuit transpilation speed in the 0.13.0 release should
    be significanlty faster than in previous releases.

    There has been a significant simplification to the style in which Pulse
    instructions are built. Now, ``Command`` s are deprecated and a unified
    set of :py:class:`~qiskit.pulse.instruction.Instruction` s are supported.

    The :mod:`qiskit.quantum_info` module includes several new functions
    for generating random operators (such as Cliffords and quantum channels)
    and for computing the diamond norm of quantum channels; upgrades to the
    :class:`~qiskit.quantum_info.Statevector` and
    :class:`~qiskit.quantum_info.DensityMatrix` classes to support
    computing measurement probabilities and sampling measurements; and several
    new classes are based on the symplectic representation
    of Pauli matrices. These new classes include Clifford operators
    (:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are
    sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`),
    lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`),
    and lists of stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`).

    This release also has vastly improved documentation across Qiskit,
    including improved documentation for the :mod:`qiskit.circuit`,
    :mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules.

    For full details on all the changes made in this release see the detailed
    release notes below.

upgrade:
  - |
    The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was deprecated
    in the 0.9.0 release has been removed. If you were using this method you
    can leverage Python's ``del`` statement or ``delattr()`` function
    to perform the same task.
features:
  - |
    The circuit library :mod:`qiskit.circuit.library` has new circuit
    definitions for arithmetic circuits:

    * :class:`~qiskit.circuit.library.FunctionalPauliRotations`
    * :class:`~qiskit.circuit.library.LinearPauliRotations`
    * :class:`~qiskit.circuit.library.PolynomialPauliRotations`
    * :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations`
    * :class:`~qiskit.circuit.library.WeightedAdder`
    * :class:`~qiskit.circuit.library.IntegerComparator`

deprecations:
  - |
    Passing in the data to the constructor for
    :class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict``
    is deprecated and will be removed in a future release. Instead you should
    now pass the fields in as kwargs to the constructor. For example the
    previous behavior of::

      from qiskit.dagcircuit import DAGNode

      data_dict = {
          'type': 'in',
          'name': 'q_0',
      }
      node = DAGNode(data_dict)

    should now be::

      from qiskit.dagcircuit import DAGNode

      node = DAGNode(type='in', name='q_0')
